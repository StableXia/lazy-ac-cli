#!/usr/bin/env node

const program = require('commander')
const colors = require('colors')
const inquirer = require('inquirer')
const downloadTemplate = require('../libs/downloadTemplate')
const getWeather = require('../libs/weather')
const print = require('../libs/weather/print')
const ora = require('ora')
const { templateUrl, inquirerMsg } = require('../libs/consts')
const { filePathExist } = require('../libs/helps')
const shell = require('shelljs')

colors.setTheme({
  silly: 'rainbow',
  input: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'green',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red'
})

program
  .version(require('../package').version, '-v, --version')
  .option('-b, --branch <branchName>', 'the name of the merged source branch')
  .name('lazy')
  .usage('<我就知道你会来的>'.green)

const parsed = program.parseOptions(process.argv.slice(2))

/**
 * 帮助信息
 */
program.on('--help', () => {
  console.log()
  console.log('举个例子:')
  console.log()
  console.log('  # 创建 .gitignore 文件')
  console.log('  $ lazy gitignore')
  console.log()
})

/**
 * 拉取 gitignore 文件
 */
program
  .command('gitignore')
  .description('快速生成 .gitignore 文件')
  .action(async () => {
    if (parsed.args.length > 1) {
      console.log('不需要参数: %s\n参见 lazy --help', parsed.args.slice(1).join(' ').red)
      process.exit(1)
    }

    const isExist = await filePathExist('.gitignore')
    if (isExist) {
      const { override } = await inquirer.prompt(inquirerMsg.confirm.override)
      if (!override) {
        process.exit(1)
      }
    }

    const spinner = ora('gitignore 模板下载中...'.yellow)
    spinner.start()
    downloadTemplate(templateUrl.gitIgnore, '.gitignore')
      .then(() => {
        spinner.stop()
        console.log('gitignore 模板下载成功'.green)
      })
      .catch(() => {
        spinner.stop()
        console.log('gitignore 模板下载失败'.red)
      })
  })

/**
 * 天气查询
 */
program
  .command('weather [name]')
  .description('天气查询，<name> 查询的城市名称')
  .action(name => {
    if (parsed.args.length > 2) {
      console.log(
        '参数太多: %s\n参见 lazy --help',
        parsed.args.slice(2).join(' ').red
      )
      process.exit(1)
    }
    const spinner = ora('天气查询中...'.yellow)
    spinner.start()
    getWeather(name)
      .then(res => {
        spinner.stop()
        print.printToday(res[0])
        print.printSuggestion(res[1])
        print.printDaily(res[2])
      })
      .catch(() => {
        spinner.stop()
        console.log('天气查询失败'.red)
      })
  })

/**
 * git快捷操作
 */
program
  .command('merge <branchs...>')
  .description('批量分支合并， branchs 合并的目标分支')
  .action(branchs => {
    branchs.forEach(branchName => {
      if (shell.exec(`git checkout ${branchName}`).code !== 0) {
        shell.echo(`Error: git checkout ${branchName}`.red);
        shell.exit(1)
        process.exit(1)
      }
      if (shell.exec('git pull --rebase').code !== 0) {
        shell.echo(`Error: git pull --rebase`.red);
        shell.exit(1)
        process.exit(1)
      }
      if (shell.exec(`git merge ${program.branch}`).code !== 0) {
        shell.echo(`Error: git merge ${program.branch}`.red);
        shell.exit(1)
        process.exit(1)
      }
      if (shell.exec('git push').code !== 0) {
        shell.echo(`Error: git push`.red);
        shell.exit(1)
        process.exit(1)
      }
    })
    shell.exec(`git checkout ${program.branch}`)
    process.exit(1)
  })

/**
 * 未知命令或参数的报错提示
 */
program.on('command:*', function() {
  console.log('未知命令: %s\n参见 lazy --help', program.args.join(' ').red)
  process.exit(1)
})

if (parsed.unknown.includes('-h') || parsed.unknown.includes('--help')) {
  program.help()
  process.exit(1)
}

if (parsed.unknown.length > 0) {
  console.log('未知选项: %s\n参见 lazy --help', parsed.unknown.join(' ').red)
  process.exit(1)
}

if (parsed.args.length === 0) {
  program.help()
}

program.parse(process.argv)
